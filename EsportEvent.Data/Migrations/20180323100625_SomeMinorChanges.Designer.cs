// <auto-generated />
using EsportEvent.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EsportEvent.Data.Migrations
{
    [DbContext(typeof(EsportEventContext))]
    [Migration("20180323100625_SomeMinorChanges")]
    partial class SomeMinorChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EsportEvent.Domain.Game", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Publisher");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<int>("Tournaments");

                    b.HasKey("Name");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("EsportEvent.Domain.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("GameDay");

                    b.Property<int?>("Team1GameId");

                    b.Property<int>("Team1Id");

                    b.Property<string>("Team1Name");

                    b.Property<int?>("Team2GameId");

                    b.Property<int>("Team2Id");

                    b.Property<string>("Team2Name");

                    b.Property<int?>("TournamentGameId");

                    b.Property<string>("TournamentName");

                    b.Property<int?>("WinnerGameId");

                    b.Property<int>("WinnerId");

                    b.Property<string>("WinnerName");

                    b.HasKey("Id");

                    b.HasIndex("Team1GameId", "Team1Name");

                    b.HasIndex("Team2GameId", "Team2Name");

                    b.HasIndex("TournamentGameId", "TournamentName");

                    b.HasIndex("WinnerGameId", "WinnerName");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("EsportEvent.Domain.Player", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("UserName");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("EsportEvent.Domain.PlayerGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameId");

                    b.Property<string>("GameName");

                    b.Property<int>("PlayerId");

                    b.Property<string>("PlayerNickName");

                    b.Property<string>("PlayerRole");

                    b.Property<string>("PlayerUserName");

                    b.Property<int?>("TeamGameId");

                    b.Property<string>("TeamName");

                    b.HasKey("Id");

                    b.HasIndex("GameName");

                    b.HasIndex("PlayerUserName");

                    b.HasIndex("TeamGameId", "TeamName");

                    b.ToTable("PlayerGames");
                });

            modelBuilder.Entity("EsportEvent.Domain.PlayerStats", b =>
                {
                    b.Property<int>("MatchId");

                    b.Property<int>("PlayerGameId");

                    b.Property<int>("Assists");

                    b.Property<int>("Deaths");

                    b.Property<int>("Kills");

                    b.HasKey("MatchId", "PlayerGameId");

                    b.HasIndex("PlayerGameId");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("EsportEvent.Domain.Team", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<string>("Name");

                    b.Property<int?>("TournamentGameId");

                    b.Property<string>("TournamentName");

                    b.HasKey("GameId", "Name");

                    b.HasIndex("Name");

                    b.HasIndex("TournamentGameId", "TournamentName");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("EsportEvent.Domain.Tournament", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<string>("Name");

                    b.HasKey("GameId", "Name");

                    b.HasIndex("Name");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("EsportEvent.Domain.Match", b =>
                {
                    b.HasOne("EsportEvent.Domain.Team", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1GameId", "Team1Name");

                    b.HasOne("EsportEvent.Domain.Team", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2GameId", "Team2Name");

                    b.HasOne("EsportEvent.Domain.Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentGameId", "TournamentName");

                    b.HasOne("EsportEvent.Domain.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerGameId", "WinnerName");
                });

            modelBuilder.Entity("EsportEvent.Domain.PlayerGame", b =>
                {
                    b.HasOne("EsportEvent.Domain.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameName");

                    b.HasOne("EsportEvent.Domain.Player", "Player")
                        .WithMany("Games")
                        .HasForeignKey("PlayerUserName");

                    b.HasOne("EsportEvent.Domain.Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamGameId", "TeamName");
                });

            modelBuilder.Entity("EsportEvent.Domain.PlayerStats", b =>
                {
                    b.HasOne("EsportEvent.Domain.Match")
                        .WithMany("PlayerStats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EsportEvent.Domain.PlayerGame", "PlayerGame")
                        .WithMany()
                        .HasForeignKey("PlayerGameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EsportEvent.Domain.Team", b =>
                {
                    b.HasOne("EsportEvent.Domain.Game", "Game")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EsportEvent.Domain.Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentGameId", "TournamentName");
                });

            modelBuilder.Entity("EsportEvent.Domain.Tournament", b =>
                {
                    b.HasOne("EsportEvent.Domain.Game", "Game")
                        .WithMany()
                        .HasForeignKey("Name")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
